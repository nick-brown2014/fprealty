generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                     String         @id @default(cuid())
  email                  String         @unique
  password               String
  firstName              String
  lastName               String
  phoneNumber            String
  emailOptIn             Boolean        @default(false)
  isAdmin                Boolean        @default(false)
  resetToken             String?        @unique
  resetTokenExpiry       DateTime?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  favorites              Favorite[]
  savedSearches          SavedSearch[]
  sessions               Session[]
  accounts               Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@index([userId])
}

model SavedSearch {
  id              String   @id @default(cuid())
  userId          String
  name            String
  searchQuery     String?
  minPrice        Int?
  maxPrice        Int?
  minBeds         Int?
  minBaths        Int?
  propertyTypes   String[] @default([])
  includeLand     Boolean  @default(false)
  statuses        String[] @default([])
  bounds          Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
